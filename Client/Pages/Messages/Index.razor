@page "/messages/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable

<h3 class="card-title">Messages</h3>

<a href="/messages/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Message
</a>
<br />
<br />

@if (Messages == null)
{
    <div class="alert alert-info">Loading Messages...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Message Title</th>
                <th>Message Content</th>
                <th>Message Date</th>
                <th>Sender</th>
                <th>Receiver</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var message in Messages)
            {
            <tr>
                <td>@message.MessageTitle</td>
                <td>@message.MessageContent </td>
                <td>@message.MessageDate</td>
                <td>@message.Sender.Name</td>
                <td>@message.Receiver.Name</td>


                <td>
                    <a href="/messages/view/@message.Id" class="btn btn-primary">
                        <span class="oi oi-book"></span>
                    </a>
                    <a href="/messages/edit/@message.Id" class="btn btn-warning">
                        <span class="oi oi-pencil"></span>
                    </a>
                    <button class="btn btn-danger" @onclick="@(()=>Delete(message.Id))">
                        <span class="oi oi-delete"></span>
                    </button>
                </td>
            </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<Message> Messages;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Messages = await _client.GetFromJsonAsync<List<Message>>("api/messages");
    }

    async Task Delete(int messageId)
    {
        var message = Messages.First(q => q.Id == messageId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {message.MessageTitle}?");
        if (confirm)
        {
            await _client.DeleteAsync("api/messages/"+ messageId);
            await OnInitializedAsync();
        }
    }
    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}